// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: urls.sql

package database

import (
	"context"
	"time"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url, short_url) 
VALUES ($1, $2)
RETURNING id, original_url, short_url, created_at
`

type CreateURLParams struct {
	OriginalUrl string
	ShortUrl    string
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL, arg.OriginalUrl, arg.ShortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls
WHERE id = $1
`

func (q *Queries) DeleteURL(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteURL, id)
	return err
}

const getURLByID = `-- name: GetURLByID :one
SELECT id, original_url, short_url, created_at
FROM urls
WHERE id = $1
`

func (q *Queries) GetURLByID(ctx context.Context, id int32) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getURLByOriginalURL = `-- name: GetURLByOriginalURL :one
SELECT id, original_url, short_url, created_at
FROM urls
WHERE original_url = $1
`

func (q *Queries) GetURLByOriginalURL(ctx context.Context, originalUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByOriginalURL, originalUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getURLByShortURL = `-- name: GetURLByShortURL :one
SELECT id, original_url, short_url, created_at 
FROM urls 
WHERE short_url = $1
`

func (q *Queries) GetURLByShortURL(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByShortURL, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getURLs = `-- name: GetURLs :many
SELECT id, original_url, short_url, created_at
FROM urls
`

func (q *Queries) GetURLs(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.ShortUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLsByDate = `-- name: GetURLsByDate :many
SELECT id, original_url, short_url, created_at
FROM urls
WHERE created_at >= $1 AND created_at <= $2
`

type GetURLsByDateParams struct {
	CreatedAt   time.Time
	CreatedAt_2 time.Time
}

func (q *Queries) GetURLsByDate(ctx context.Context, arg GetURLsByDateParams) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getURLsByDate, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.ShortUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateURL = `-- name: UpdateURL :one
UPDATE urls
SET original_url = $2, short_url = $3
WHERE id = $1
RETURNING id, original_url, short_url, created_at
`

type UpdateURLParams struct {
	ID          int32
	OriginalUrl string
	ShortUrl    string
}

func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, updateURL, arg.ID, arg.OriginalUrl, arg.ShortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}
